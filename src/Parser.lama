-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun mkOp (opTok) {
  [s (opTok), fun (l, op, r) {Binop(opTok, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (
      x=decimal {Const (stringInt (x))} |
      x=lident  {Var (x)}               |
      inbr[s("("), exp, s(")")]
    ),

    exp = memo $ eta (expr (
      { [Left, {mkOp("!!")}]
      , [Left, {mkOp("&&")}]
      , [Nona, {mkOp("=="), mkOp("!="), mkOp("<="), mkOp("<"), mkOp(">="), mkOp(">")}]
      , [Left, {mkOp("+"), mkOp("-")}]
      , [Left, {mkOp("*"), mkOp("/"), mkOp("%")}]
      },
      primary
    ));

var stmt = memo $ eta syntax (
      kSkip {Skip}
    | x=lident s[":="] e=exp {Assn (x, e)}
    | kRead x=inbr[s("("), lident, s(")")] {Read (x)}
    | kWrite e=inbr[s("("), exp,  s(")")] {Write (e)}
);

var stmts = memo $ eta syntax (
    s1=stmt s[";"] s2=stmts {Seq (s1, s2)}
  | stmt
);

-- Public top-level parser
public parse = stmts;
             
