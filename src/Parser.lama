-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun mkOp (opTok) {
  [s (opTok), fun (l, op, r) {Binop(opTok, l, r)}]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),

    exp = memo $ eta (expr (
      { [Left, {mkOp("!!")}]
      , [Left, {mkOp("&&")}]
      , [Nona, {mkOp("=="), mkOp("!="), mkOp("<="), mkOp("<"), mkOp(">="), mkOp(">")}]
      , [Left, {mkOp("+"), mkOp("-")}]
      , [Left, {mkOp("*"), mkOp("/"), mkOp("%")}]
      },
      primary
    ));

var stmt = memo $ eta syntax (
      kSkip {Skip}
    | x=lident s[":="] e=exp {Assn (x, e)}
    | kRead x=inbr[s("("), lident, s(")")] {Read (x)}
    | kWrite e=inbr[s("("), exp,  s(")")] {Write (e)}
    | kWhile cond=exp kDo body=stmts kOd {While (cond, body)}
    | kDo body=stmts kWhile cond=exp kOd {DoWhile (body, cond)}
    | kIf body=ifPart kFi {body} 
    | kFor init=stmt s[","] cond=exp s[","] each=stmt kDo body=stmts kOd {Seq (init, While (cond, Seq (body, each)))}
    ),

    stmts = memo $ eta syntax (
      s1=stmt s[";"] s2=stmts {Seq (s1, s2)}
    | stmt
    ),

    ifPart = memo $ eta syntax (
      cond=exp th=thenPart el=elsePart {If (cond, th, el)}
    ),

    thenPart = memo $ eta syntax (
      kThen body=stmts {body}
    ),
    
    elsePart = memo $ eta syntax (
      empty {Skip}
    | kElse body=stmts {body}
    | kElif body=ifPart {body}
    );

-- Public top-level parser
public parse = stmts;
             
