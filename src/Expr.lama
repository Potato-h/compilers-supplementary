-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[vars, io], expr) {
  case expr of
    Assn    (lvalue, rvalue) -> 
      case evalList (c, {lvalue, rvalue}) of
        [c@[vars, io], {Ref (name), value}] -> [[vars <- [name, value], io], value] 
      esac         
  | Seq     (expr1, expr2) -> 
      case evalList (c, {expr1, expr2}) of
        [c, {_, value}] -> [c, value] 
      esac    
  | Skip -> [c, Unit]
  | Read    (name) -> 
      case readWorld (io) of
        [value, io] -> [[vars <- [name, value], io], Unit]
      esac              
  | Write   (expr) -> 
      case eval (c, expr) of
        [c@[vars, io], value] -> [[vars, writeWorld (value, io)], Unit]
      esac        
  | If      (cond, th, el) -> 
      case eval (c, cond) of
        [c, 0] -> eval (c, el) 
      | [c, v] -> eval (c, th)
      esac
  | While   (cond, expr) -> 
      case eval (c, cond) of
        [c, 0] -> [c, Unit] 
      | [c, _] -> 
          case eval (c, expr) of
            [c, _] -> eval (c, While (cond, expr))
          esac
      esac         
  | DoWhile (expr, cond) -> eval (c, Seq (expr, While (cond, expr)))    
  | Var     (name) -> [c, vars.lookup (name)]             
  | Const   (v) -> [c, v]        
  | Ref     (name) -> [c, Ref (name)]        
  | Binop   (op, lhs, rhs) -> 
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] -> [c, evalOp (op, lhs, rhs)]
      esac
  | Ignore  (expr) -> 
      case eval (c, expr) of
        [c, _] -> [c, Unit]
      esac 
  | Scope (defs, expr) -> 
      var s = foldl (fun (s, def) {
        case def of
          Var (names) -> s.addNames (names)
        | Fun (name, args, body) -> s.addFunction (name, args, body)
        esac
      }, vars.enterScope, defs);

      case eval ([s, io], expr) of
        [[vars, io], v] -> [[vars.leaveScope, io], v]
      esac
  | Call (name, exprs) -> 
      vars.checkFun (name);

      case vars.lookup (name) of
        Fun (args, body) ->
          case evalList (c, exprs) of 
            [c@[vars, io], vals] ->
              var afterBody = eval (
                [foldl (
                  fun (s, [arg, value]) { s.addName (arg, value) }, 
                  vars.enterFunction, 
                  zip (args, vals)
                ), io], body
              );

              case afterBody of
                [[vars2, io], v] -> [[vars.leaveFunction (vars2.getGlobal), io], v]
              esac
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}