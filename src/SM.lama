-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, sc@[st, vars, io], insns) {
  case insns of 
    {} -> sc
  | ins : ns -> 
    case ins of
      READ      -> 
      case readWorld (io) of
        [value, io1] -> 
        eval (env, [value : st, vars, io1], ns) 
      esac
    | WRITE     -> 
      case st of
        value : s -> eval (env, [s, vars, writeWorld (value, io)], ns)
      esac
    | BINOP (op) -> 
      case st of
        y : x : s -> eval (env, [(evalBinOp (op, x, y)) : s, vars, io], ns)
      esac
    | LD    (name) -> eval (env, [(vars (name)) : st, vars, io], ns)
    | ST    (name) -> 
      case st of
        value : s -> eval (env, [s, vars <- [name, value], io], ns)
      esac
    | CONST (n) -> eval (env, [n : st, vars, io], ns)
    | LABEL (l) -> eval (env, sc, ns)
    | JMP (l) -> eval (env, sc, fromLabel (env, l))
    | CJMP (m, l) -> case [m, st] of
        ["z", z : s] -> if z == 0 then eval (env, [s, vars, io], fromLabel (env, l)) else eval (env, sc, ns) fi
      | ["nz", z : s] -> if z != 0 then eval (env, [s, vars, io], fromLabel (env, l)) else eval (env, sc, ns) fi
      esac
    esac
  esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> LD (name) : {}
  | Const (value) -> CONST (value) : {}
  | Binop (op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs) +++ (BINOP (op) : {})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, listBuffer (compileExpr (e)) <+ WRITE]
    | Assn  (x, e)   -> [false, env, listBuffer (compileExpr (e)) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, th, el) -> 
        case env.genLabel of
          [labEl, env] -> 
            case compile (lab, env, th) of
              [_, env, thCode] -> 
                case compile (lab, env, el) of
                  [_, env, elCode] -> [true, env,
                    listBuffer (compileExpr (cond)) <+>
                    singletonBuffer (CJMP ("z", labEl)) <+>
                    thCode <+>
                    singletonBuffer (JMP (lab)) <+>
                    singletonBuffer (LABEL (labEl)) <+>
                    elCode
                    ]
                esac
            esac
        esac
    | While (expr, stmt) -> 
        case env.genLabels (2) of
          [labCond, labStart, env] -> 
            case compile (labCond, env, stmt) of 
              [_, env, stmtCode] -> [false, env, 
                singletonBuffer (JMP (labCond)) <+>
                singletonBuffer (LABEL (labStart)) <+>
                stmtCode <+>
                singletonBuffer (LABEL (labCond)) <+>
                listBuffer (compileExpr (expr)) <+>
                singletonBuffer (CJMP ("nz", labStart))
                ]
            esac
        esac 
    | DoWhile (stmt, expr) -> 
        case env.genLabels (2) of 
          [labCond, labStart, env] -> 
            case compile (labCond, env, stmt) of
              [labCondUsed, env, stmtCode] -> [false, env, 
                singletonBuffer (LABEL (labStart)) <+>
                stmtCode <+>
                label (labCond, labCondUsed) <+>
                listBuffer (compileExpr (expr)) <+>
                singletonBuffer (CJMP ("nz", labStart))
                ]
            esac
        esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
