-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[env, io], stmt) {
  case stmt of
    Assn (name, value) -> [env <- [name, evalExpr (env, value)], io]
  | Skip -> c
  | Read (name) -> case readWorld (io) of
      [value, io1] -> [env <- [name, value], io1]
    esac
  | Write (expr) -> [env, writeWorld (evalExpr (env, expr), io)]
  | Seq (stmtL, stmtR) -> eval (eval (c, stmtL), stmtR)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
